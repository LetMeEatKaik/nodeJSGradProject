script.
  hljs.initHighlightingOnLoad();
container
 p.font-light.font-mono.text-sm.text-gray-700.transition-all.duration-200(class='hover:text-gray-900') 
  | I have the ability to run a PROMISE! This allows me to run asynchronously. I run some function, A, and then can go on with my life, while A runs in the background as a Promise. Once's it's done the web service returns something, we're notified and we can use the output. 
  | Let's look at an example:
  textarea(rows="10" cols="60" disabled="true" style='background-color:ghostwhite; margin-top:10px').
        <!DOCTYPE html>
        <!-- source: https://www.w3schools.com/Js/js_promise.asp, how does a Prromise work? -->
        <html>
        <body>
        <h3>Asynchronous Promise</h3>
        <p id="stars"></p>
        <p style='color:red;' id="y"></p>
        <script>
        y = 'I am done with the promise!';
        function display(some) {
          document.getElementById("stars").innerHTML = some;
        }
        function display2(some) {
          document.getElementById("y").innerHTML = some;
        }

        // issue a new promise
        let myPromise = new Promise(function(Resolve, Reject) {
          let x = '';
          let y = 2;
          for (i = 0; i <= 10; i ++){
            for(j = 0; j <= i; j++){
            x = x + '**';
            }
            x= x+'\n';
          }

          // two possiblilities
          if (x) {
            Resolve(x);
          } else {
            Reject("Error");
          }
        });

        // once promise is resolved return this
        myPromise.then(
          function(x) {display(x);},
          function(error) {display(error);}
        );

        /* function(`I'm done!`} {display(`I'm done!`)} */
        display2(y)
        </script>

        </body>
        </html>




  br
  br
  |Below is the output for the code above: 
  br
  script(async='', src='//jsfiddle.net/bakukai/mv7431gr/30/embed/result/')
  br
  br
  | In the above code, we create a new Promise. The Promise takes two parameters, Resolve and Reject. This is called:
  mark myPromise
  |!{'.'} This is either rejected resulted in an error, aka, 'Reject' or success 'Resolve.' This is activated in: 
  br
  br
  mark myPromise.then(...)
  br
  br
  | !{' '} The .then will choose what to call depending on the Promise's success or failure.